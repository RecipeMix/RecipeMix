<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                template="./resources/templates/commonLayout.xhtml"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:c="http://java.sun.com/jsp/jstl/core"
                xmlns:p="http://primefaces.org/ui">
    <ui:define name="title">Compare Recipes</ui:define>
    <ui:define name="header">
        <ui:include src="/resources/templates/commonHeader.xhtml" />
        <h:outputStylesheet library="css" name="nutritionLabel.min.css" />
        <h:outputScript library="js" name="nutritionLabel.min.js" target="head"/>
    </ui:define>

    <ui:define name="content">
        <p:carousel value="#{compare.compare}" var="recipe" circular="true" numVisible="1">
            <div style="width: 600px">
                <h1>
                    <h:outputText id="recipeName" value="#{recipe.recipeName}" />
                </h1>
                <div id="creatorLink">
                    <br/>submitted by: <h:link value="#{recipe.creator.firstName} #{recipe.creator.lastName}"
                                               outcome="/user_profile.xhtml" >
                        <f:param name="user" value="#{recipe.creator.userName}"/>
                    </h:link>
                </div>
                <h2>The Lowdown</h2>
                <panel id="recipeLowdown">
                    <p><h:outputText value="#{recipe.recipeDescription}" /></p>
                </panel>
                <p:panelGrid id="recipeTimes" columns="2">
                    <h:outputText value="Prep (min):#{recipe.prepTime}" />
                    <h:outputText value="Cook (min):#{recipe.cookTime}" />
                    <h:outputText value="Total (min):#{recipe.prepTime + recipe.cookTime}" />
                    <h:outputText value="Serves:#{recipe.servings}" />
                </p:panelGrid>

                <h2>Ingredients</h2>
                <p:dataGrid styleClass="recipeIngredients" value="#{recipe.ingredients}"
                            var="i" columns="2" >
                    <h:outputText  value="#{i}"/>
                </p:dataGrid>

                <h2>Instructions</h2>
                <p:dataList type="none" value="#{recipe.instructions}" var="step" styleClass="recipeSteps">
                    <p:panel>
                        <div class="stepNum">#{step.stepNumber}. </div><h:outputText value="#{step.stepDescription}"/>
                    </p:panel>
                </p:dataList>
            </div>
        </p:carousel>

        <script type="text/javascript">
            //extending/overriding PrimeFaces carousel script
            if (typeof (PrimeFaces) != 'undefined') {
                PrimeFaces.widget.Carousel = PrimeFaces.widget.Carousel.extend({init: function(b) {
                        this._super(b);
                        this.viewport = this.jq.children(".ui-carousel-viewport");
                        this.header = this.jq.children(".ui-carousel-header"), this.list = this.viewport.children("ul");
                        this.items = this.list.children(".ui-carousel-item");
                        this.prevButton = this.header.children(".ui-carousel-prev-button");
                        this.nextButton = this.header.children(".ui-carousel-next-button");
                        this.pageLinks = this.header.find(".ui-carousel-page-links .ui-carousel-page-link");
                        this.dropdown = this.header.children(".ui-carousel-dropdown");
                        this.state = $(this.jqId + "_first");
                        this.cfg.numVisible = this.cfg.numVisible || 3;
                        this.cfg.pageLinks = this.cfg.pageLinks || 3;
                        this.cfg.effect = this.cfg.effect || "slide";
                        this.cfg.effectDuration = this.cfg.effectDuration || 500;
                        this.cfg.easing = this.cfg.easing || "easeInOutCirc";
                        this.cfg.pageCount = Math.ceil(this.items.length / this.cfg.numVisible);
                        this.cfg.firstVisible = (this.cfg.firstVisible || 0) % this.items.length;
                        this.cfg.page = (this.cfg.firstVisible / this.cfg.numVisible) + 1;
                        this.animating = false;
                        var c = this.items.filter(":first"), a = c.get(0);
                        this.cfg.itemOuterWidth = c.innerWidth() + parseInt(this.getProperty(a, "margin-Left")) + parseInt(this.getProperty(a, "margin-Right")) + ((parseInt(this.getProperty(a, "border-Left-Width")) + parseInt(this.getProperty(a, "border-Right-Width"))));
                        this.cfg.itemOuterHeight = c.innerHeight() + Math.max(parseInt(this.getProperty(a, "margin-Top")), parseInt(this.getProperty(a, "margin-Bottom"))) + ((parseInt(this.getProperty(a, "border-Top-Width")) + parseInt(this.getProperty(a, "border-Bottom-Width"))));
                        if (this.cfg.vertical) {
                            this.viewport.width(this.cfg.itemOuterWidth);
                            this.viewport.height(this.cfg.numVisible * this.cfg.itemOuterHeight)
                        } else {
                            this.viewport.width(this.cfg.numVisible * this.cfg.itemOuterWidth);
                            this.viewport.height(this.cfg.itemOuterHeight)
                        }
                        this.jq.width(this.viewport.outerWidth(true));
                        this.setOffset(this.getItemPosition(this.cfg.firstVisible));
                        this.checkButtons();
                        this.bindEvents();
                        //stop autoplay starting at init.
                        //if (this.cfg.autoplayInterval) {
                        //    this.startAutoplay()
                        //}
                    }, startAutoPlay: function() {
                        //new startAutoPlay function
                        var a = this;
                        if (this.cfg.autoplayInterval) {
                            setInterval(function() {
                                a.next()
                            }, this.cfg.autoplayInterval)
                        }
                    }, startAutoplay: function() {
                        //remove startAutoplay function
                    }
                });
            }
        });
    };
        </script>

        <script type="text/javascript">
    $ = jQuery;
    $(function() {
        $('#nutrition-label').nutritionLabel({
            'showServingUnitQuantityTextbox': false,
            'showServingUnitQuantity': false,
            'showAmountPerServing': false,
            'itemName': '#{recipe.recipeName}',
            'ingredientList': '#{viewRecipeBean.readableIngredientsList}',
            'showPolyFat': false,
            'showMonoFat': false,
            'valueCalcium': #{viewRecipeBean.calciumPercentage},
            'valueCalories': #{viewRecipeBean.calories},
            'valueCholesterol': #{viewRecipeBean.cholesterol},
            'valueFatCalories': #{viewRecipeBean.caloriesFromFat},
            'valueFibers': #{viewRecipeBean.dietaryFiber},
            'valueIron': #{viewRecipeBean.ironPercentage},
            'valueProteins': #{viewRecipeBean.protein},
            'valueSatFat': #{viewRecipeBean.saturatedFat},
            'valueSodium': #{viewRecipeBean.sodium},
            'valueSugars': #{viewRecipeBean.sugars},
            'valueTotalCarb': #{viewRecipeBean.totalCarbohydrates},
            'valueTotalFat': #{viewRecipeBean.totalFat},
            'valueTransFat': #{viewRecipeBean.transFat},
            'valueVitaminA': #{viewRecipeBean.vitaminAPercentage},
            'valueVitaminC': #{viewRecipeBean.vitaminCPercentage}
        });
    });
        </script>
    </ui:define>
</ui:composition>

